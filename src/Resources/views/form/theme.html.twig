{% block edb_masked_row %}
    {{ form_label(form) }}
    {{ form_widget(form) }}
    <div class="masked-container masked-container-{{ form.vars.id }}">
        <div class="btn-group">
            {% for button_name, config in choices %}
            <button type="button" class="btn btn-sm btn-primary mb-3" data-value="{{ config.value }}" data-form-ids="{{ config.forms | join(',') }}" onclick="selectMaskedForm('{{ form.vars.id }}', '{{ config.value }}')">
                {{ button_name }}
            </button>
            {% endfor %}
        </div>
    </div>
    <script>
        jquery(function() {
            selectMaskedForm("{{ form.vars.id }}", "{{ value }}")
        });
    </script>
{% endblock %}

{% block edb_date_time_row %}
    <div class="datetime-form">
        {{ form_row(form) }}
    </div>
{% endblock %}

{% block edb_date_row %}
    <div class="datetime-form">
        {{ form_row(form) }}
    </div>
{% endblock %}

{% block edb_time_row %}
    <div class="datetime-form">
        {{ form_row(form) }}
    </div>
{% endblock %}

{% block edb_media_row %}
    <div class="mb-3">
        {{ form_label(form) }}
        {% if form.vars.errors | length > 0 %}
            {% for error in form.vars.errors %}
                <div class="alert alert-sm alert-danger">{{ error.message }}</div>
            {% endfor %}
        {% endif %}
        <div id="{{ form.vars.id }}-media-form">
            <div id="{{ form.vars.id }}-media-preview" class="bg-light col-12 d-flex justify-content-center"></div>
            <div class="row mb-3">
                <div class="col-6">
                    <button type="button" class="btn btn-sm btn-secondary w-100" onclick="jquery(this).trigger('open')">
                        {{ 'Select media' | trans }}
                    </button>
                </div>
                <div class="col-6">
                    <input type="hidden" id="{{ form.vars.id }}" name="{{ form.vars.full_name }}" value="{{ value }}">
                    <input type="file" onchange="jquery('#{{ form.vars.id }}-media-form').trigger({type: 'updateValue', fileInput: this})" class="d-none">
                    <label onclick="jquery(this).prev().trigger('click')" for="{{ form.vars.full_name }}" class="custom-upload-label btn btn-sm btn-secondary"></label>
                </div>
            </div>
        </div>
    </div>

    <script>
        jquery(function() {
            const previewContainer = jquery("#{{ form.vars.id }}-media-preview")
            const formContainer = jquery("#{{ form.vars.id }}-media-form")
            const inputElement = jquery("#{{ form.vars.id }}")

            previewContainer.on("refresh", async function(event) {
                const response = await fetch("{{ path(preview_route_name) }}?id=" + event.id, {method: "GET"})
                if (response.status === 200) {
                    const html = await response.text()
                    if (html) {
                        this.innerHTML = "<div class=\"mb-3\">"+html+"</div>"
                    }
                } else {
                    showAlert("Something went wrong while loading the preview", "danger")
                }
            })

            previewContainer.trigger({type: "refresh", id: "{{ value }}"})

            formContainer.on("open", async function() {
                mediaModalObject.show()

                let params = {"t": '{{ form.vars.id }}'}
                {% if mime_types | length > 0 %}
                params["m"] = {{ mime_types | json_encode | raw }}
                {% endif %}

                const response = await fetch("{{ path('media_modal_list') }}?" + jquery.param(params), {method: "GET"})
                const html = await response.text()
                mediaModelBody.html(html)
            })

            document.addEventListener('pickMedia', async function(event) {
                if (event.detail.targetId != "{{ form.vars.id }}") return
                mediaModalObject.hide()
                inputElement.val(event.detail.value)
                previewContainer.trigger({type: "refresh", id: event.detail.value})
            })

            formContainer.on("updateValue", async function(event) {
                const file = event.fileInput.files[0]
                const formData = new FormData()
                formData.append("media", file)

                const response = await fetch("{{ path('media_upload') }}", {
                    method: "POST",
                    body: formData
                });

                const responseBody = await response.json()
                if (response.status === 200) {
                    event.fileInput.value = null
                    showAlert("File uploaded successfully")
                    inputElement.val(responseBody.mediaId)
                    previewContainer.trigger({type: "refresh", id: responseBody.mediaId})
                } else {
                    showAlert(responseBody.error, "danger")
                }
            })
        })
    </script>
{% endblock %}

{% block edb_collection_row %}
    <div class="mb-3">
        <label for="{{ form.vars.id }}" class="form-label">{{ form.vars.name | humanize | trans }}</label>
        <div class="form-collection-wrapper bg-light">
            <div class="form-collection-inner">
                <ul class="form-collection {{ form.vars.id }}" data-prototype="{{ form_row(form.vars.prototype)|e('html_attr') }}">
                    {% for childForm in form.children %}
                        <li class="form-collection-item">
                            <div class="row">
                                <div class="col-md-11 col-10">
                                    {{ form_row(childForm) }}
                                </div>
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <button type="button" class="add_item_link_{{ form.vars.id }} btn btn-sm btn-success" data-collection-holder-class="{{ form.vars.id }}">
                <i class="fa fa-plus-circle"></i>
            </button>
        </div>
    </div>

    <script>
        function addFormToCollection(collectionHolderClass) {
            // Get the ul that holds the collection of tags
            let collectionHolder = jquery("." + collectionHolderClass);

            // Get the data-prototype explained earlier
            let prototype = collectionHolder.data("prototype");

            // get the new index
            let index = collectionHolder.data("index");

            let newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);

            // increase the index with one for the next item
            collectionHolder.data("index", index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            let newFormLi = jquery("<li class=\"form-collection-item\"><div class=\"row\"><div class=\"col-md-11 col-10\">"+newForm+"</div></div></li>");

            // Add the new form at the end of the list
            collectionHolder.append(newFormLi)

            // add a delete link to the new form
            addTagFormDeleteLink(newFormLi);
        }

        function addTagFormDeleteLink(tagFormLi) {
            let removeFormButton = jquery("<div class=\"col-md-1 col-2\"><button type=\"button\" class=\"btn btn-sm btn-danger\"><i class=\"fa fa-minus-circle\"></i></button></div>");
            tagFormLi.find(".row:first-child").prepend(removeFormButton);

            removeFormButton.on("click", "button", function(e) {
                tagFormLi.remove();
            });
        }

        jquery(document).ready(function() {
            // Get the ul that holds the collection of tags
            let collectionHolder = jquery("ul.{{ form.vars.id }}");

            // add a delete link to all of the existing tag form li elements
            collectionHolder.find("li").each(function() {
                addTagFormDeleteLink(jquery(this));
            });

            // Get the ul that holds the collection of tags
            let tagsCollectionHolder = jquery("ul.{{ form.vars.id }}");
            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            tagsCollectionHolder.data("index", tagsCollectionHolder.find("input").length);

            jquery("body").on("click", ".add_item_link_{{ form.vars.id }}", function(e) {
                let collectionHolderClass = jquery(e.currentTarget).data("collectionHolderClass");
                // add a new tag form (see next code block)
                addFormToCollection(collectionHolderClass);
            })
        });
    </script>
{% endblock %}

{% block edb_slug_row %}
    <div class="mb-3">
        {{ form_label(form) }}

        {% set formId = form.vars.id %}
        {% set messageText = 'The slug will be recreated after saving' | trans %}
        {% set onClickJs = "jquery('#" ~ formId ~ "').val(''); showAlert('" ~ messageText ~ "');" %}

        <div class="input-group">
            <input id="{{ form.vars.id }}" name="{{ form.vars.full_name }}" type="text" class="form-control" readonly value="{{ value ?? '' }}">
            <div class="input-group-append test">
                <button onclick="{{ onClickJs | raw }}" class="btn btn-outline-secondary" type="button">
                    <i class="fa fa-sync"></i>
                </button>
            </div>
        </div>
    </div>
{% endblock %}

{% block edb_tiny_mce_row %}
    <script type="text/javascript">
        jquery(function() {
            tinymce.init({
                selector: "#tinymce-{{ form.vars.id }}",
                height: {{ height }},
                menubar: {{ show_menu ? 'true' : 'false' }},
                relative_urls: false,
                remove_script_host : true,
                force_br_newlines: {{ force_br_newlines ? 'true' : 'false' }},
                force_p_newlines: {{ force_p_newlines ? 'true' : 'false' }},
                forced_root_block: '{{ forced_root_block }}',
                document_base_url: "{{ app.request.getSchemeAndHttpHost() }}/",
                plugins: [
                    "{{ form.vars.tinymce_plugins }}",
                ],
                toolbar: "{{ form.vars.tinymce_toolbar }}",
                {% if form.vars.editor_css %}
                content_css: "{{ form.vars.editor_css }}",
                {% endif %}
                {% if form.vars.tinymce_formats %}
                formats: {{ form.vars.tinymce_formats | json_encode() | raw }},
                {% endif %}
                {% if form.vars.tinymce_style_formats %}
                style_formats: {{ form.vars.tinymce_style_formats | json_encode() | raw }},
                {% endif %}
                {% if form.vars.link_list %}
                link_list: {{ form.vars.link_list | json_encode() | raw }},
                {% endif %}
            });
            document.addEventListener('pickMedia', async function(event) {
                if (event.detail.targetId != "tinymce-{{ form.vars.id }}") return
                mediaModalObject.hide()

                const params = {
                    "w": 100,
                    "h": 100,
                    "id": event.detail.value
                }

                const response = await fetch("{{ path('media_insert') }}?" + jquery.param(params), {method: "GET"})
                const html = await response.text()
                const parentEditor = parent.tinyMCE.activeEditor;
                parentEditor.execCommand('mceInsertRawHTML', false, html)
            });
        });
    </script>
    <div class="mb-3">
        {{ form_label(form) }}
        <textarea name="{{ full_name }}" data-list-url="{{ path('media_modal_list') }}?{% for mime in media_mime_types %}{{ loop.first ? '' : '&' }}m[]={{ mime }}{% endfor %}" data-insert-url="{{ path('media_insert') }}" id="tinymce-{{ form.vars.id }}">{{ value | raw }}</textarea>
    </div>
{% endblock %}
