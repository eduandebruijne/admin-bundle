{% block modal %}
    <div class="modal fade" id="{{ form.vars.id }}-modal">
		<div class="modal-dialog modal-xl">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">{{ 'Select media' | trans }}</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block masked_row %}
    {{ form_label(form) }}
    {{ form_widget(form) }}
    <div class="masked-container masked-container-{{ form.vars.id }}">
        <div class="btn-group">
            {% for button_name, config in choices %}
            <button type="button" class="btn btn-sm btn-primary mb-3" data-value="{{ config.value }}" data-form-ids="{{ config.forms | join(',') }}" onclick="selectMaskedForm('{{ form.vars.id }}', '{{ config.value }}')">
                {{ button_name }}
            </button>
            {% endfor %}
        </div>
    </div>
    <script>
        jquery(function() {
            selectMaskedForm('{{ form.vars.id }}', '{{ value }}')
        });
    </script>
{% endblock %}

{% block datetime_row %}
    <div class="datetime-form">
        {{ form_row(form) }}
    </div>
{% endblock %}

{% block date_row %}
    <div class="datetime-form">
        {{ form_row(form) }}
    </div>
{% endblock %}

{% block time_row %}
    <div class="datetime-form">
        {{ form_row(form) }}
    </div>
{% endblock %}

{% block media_row %}
    <div class="mb-3">
        {{ form_label(form) }}
        <div id="{{ form.vars.id }}-media-form">
            <div id="{{ form.vars.id }}-media-preview" class="bg-light col-12 d-flex justify-content-center"></div>
            <div class="row mb-3">
                <div class="col-6">
                    <button type="button" class="btn btn-sm btn-secondary w-100" onclick="jquery('#{{ form.vars.id }}-modal').trigger('open')">
                        {{ 'Select media' | trans }}
                    </button>
                </div>
                <div class="col-6">
                    <input type="hidden" id="{{ form.vars.id }}" name="{{ form.vars.full_name }}" value="{{ value }}">
                    <input type="file" onchange="jquery('#{{ form.vars.id }}-media-form').trigger({type: 'updateValue', fileInput: this})" class="d-none">
                    <label onclick="jquery(this).prev().trigger('click')" for="{{ form.vars.full_name }}" class="custom-upload-label btn btn-sm btn-secondary"></label>
                </div>
            </div>
            {{ block('modal') }}
        </div>
    </div>

    <script>
        jquery(function() {
            const previewContainer = jquery('#{{ form.vars.id }}-media-preview')
            const formContainer = jquery('#{{ form.vars.id }}-media-form')
            const inputElement = jquery('#{{ form.vars.id }}')
            const mediaModal = jquery('#{{ form.vars.id }}-modal')
            const mediaModalObject = new bootstrap.Modal(mediaModal)
            const mediaModelBody = jquery('#{{ form.vars.id }}-modal .modal-body')

            previewContainer.on('refresh', async function(event) {
                const response = await fetch('{{ path(preview_route_name) }}?id=' + event.id, {method: "GET"});
                if (response.status === 200) {
                    const html = await response.text()
                    if (html) {
                        this.innerHTML = '<div class="mb-3">'+html+'</div>'
                    }
                } else {
                    showAlert('Something went wrong while loading the preview', 'danger')
                }
            });

            previewContainer.trigger({type: 'refresh', id: '{{ value }}'})

            mediaModal.on('open', async function() {
                mediaModalObject.show()
                const response = await fetch("{{ path('media_list') }}", {method: "GET"});
                const html = await response.text()
                mediaModelBody.html(html)
            })

            mediaModal.on('choose', async function(event) {
                mediaModalObject.hide()
                inputElement.val(event.value)
                previewContainer.trigger({type: 'refresh', id: event.value})
            })

            formContainer.on('updateValue', async function(event) {
                const file = event.fileInput.files[0]
                const formData = new FormData()
                formData.append("image", file)

                const response = await fetch("{{ path('media_upload') }}", {
                    method: "POST",
                    body: formData
                });

                const responseBody = await response.json()
                if (response.status === 200) {
                    event.fileInput.value = null
                    showAlert('File uploaded successfully')
                    inputElement.val(responseBody.mediaId)
                    previewContainer.trigger({type: 'refresh', id: responseBody.mediaId})
                } else {
                    showAlert(responseBody.error, 'danger')
                }
            })
        });
    </script>
{% endblock %}

{% block collection_row %}
    <div class="mb-3">
        <label for="{{ form.vars.id }}" class="form-label">{{ form.vars.name | humanize }}</label>
        <div class="form-collection-wrapper bg-light">
            <div class="form-collection-inner">
                <ul class="form-collection {{ form.vars.id }}" data-prototype="{{ form_row(form.vars.prototype)|e('html_attr') }}">
                    {% for childForm in form.children %}
                        <li class="form-collection-item">
                            <div class="row">
                                <div class="col-11">
                                    {{ form_row(childForm) }}
                                </div>
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            <button type="button" class="add_item_link_{{ form.vars.id }} btn btn-sm btn-success" data-collection-holder-class="{{ form.vars.id }}">
                <i class="fa fa-plus-circle"></i>
            </button>
        </div>
    </div>

    <script>
        function addFormToCollection(collectionHolderClass) {
            // Get the ul that holds the collection of tags
            let collectionHolder = jquery('.' + collectionHolderClass);

            // Get the data-prototype explained earlier
            let prototype = collectionHolder.data('prototype');

            // get the new index
            let index = collectionHolder.data('index');

            let newForm = prototype;
            // You need this only if you didn't set 'label' => false in your tags field in TaskType
            // Replace '__name__label__' in the prototype's HTML to
            // instead be a number based on how many items we have
            // newForm = newForm.replace(/__name__label__/g, index);

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            newForm = newForm.replace(/__name__/g, index);

            // increase the index with one for the next item
            collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a tag" link li
            let newFormLi = jquery('<li class="form-collection-item"><div class="row"><div class="col-11">'+newForm+'</div></div></li>');

            // Add the new form at the end of the list
            collectionHolder.append(newFormLi)

            // add a delete link to the new form
            addTagFormDeleteLink(newFormLi);
        }

        function addTagFormDeleteLink(tagFormLi) {
            let removeFormButton = jquery('<div class="col-1"><button type="button" class="btn btn-sm btn-danger"><i class="fa fa-minus-circle"></i></button></div>');
            tagFormLi.find('.row:first-child').prepend(removeFormButton);

            removeFormButton.on('click', 'button', function(e) {
                tagFormLi.remove();
            });
        }

        jquery(document).ready(function() {
            // Get the ul that holds the collection of tags
            let collectionHolder = jquery('ul.{{ form.vars.id }}');

            // add a delete link to all of the existing tag form li elements
            collectionHolder.find('li').each(function() {
                addTagFormDeleteLink(jquery(this));
            });

            // Get the ul that holds the collection of tags
            let tagsCollectionHolder = jquery('ul.{{ form.vars.id }}');
            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            tagsCollectionHolder.data('index', tagsCollectionHolder.find('input').length);

            jquery('body').on('click', '.add_item_link_{{ form.vars.id }}', function(e) {
                let collectionHolderClass = jquery(e.currentTarget).data('collectionHolderClass');
                // add a new tag form (see next code block)
                addFormToCollection(collectionHolderClass);
            })
        });
    </script>
{% endblock %}

{% block slug_row %}
    <div class="mb-3">
        {{ form_label(form) }}

        {% set formId = form.vars.id %}
        {% set messageText = 'The slug will be recreated after saving' | trans %}
        {% set onClickJs = "jquery('#" ~ formId ~ "').val(''); showAlert('" ~ messageText ~ "');" %}

        <div class="input-group">
            <input id="{{ form.vars.id }}" name="{{ form.vars.full_name }}" type="text" class="form-control" readonly value="{{ value ?? '' }}">
            <div class="input-group-append test">
                <button onclick="{{ onClickJs | raw }}" class="btn btn-outline-secondary" type="button">
                    <i class="fa fa-sync"></i>
                </button>
            </div>
        </div>
    </div>
{% endblock %}

{% block quill_row %}
    <div class="mb-3">
        {{ form_label(form) }}
        <div id="quill-container-{{ form.vars.id }}">
            <input type="file" onchange="jquery('#quill-container-{{ form.vars.id }}').trigger({type: 'updateValue', fileInput: this})" class="d-none">
            <input type="hidden" {{ block('widget_attributes') }} value="{{ value }}">
            <div id="{{ id }}_quill" class="form-control quill-editor">
                {{ value | raw }}
            </div>
        </div>
    </div>

    {{ form_errors(form) }}

    <script>
        jquery(function() {
            const quillContainer = jquery('#quill-container-{{ form.vars.id }}')
            const quillContainerFileInput = jquery('#quill-container-{{ form.vars.id }} [type="file"]')
            quillContainer.on('updateValue', async function(event) {
                const file = event.fileInput.files[0]
                const formData = new FormData()
                formData.append("image", file)

                const response = await fetch("{{ path('media_upload_original_path') }}", {
                    method: "POST",
                    body: formData
                });

                const responseBody = await response.json()
                if (response.status === 200) {
                    event.fileInput.value = null
                    showAlert('File uploaded successfully')

                    const range = quill.getSelection(true);
                    quill.insertEmbed(range.index, 'image', responseBody.path, 'api')
                } else {
                    showAlert(responseBody.error, 'danger')
                }
            })

            const quill = new Quill('#{{ id }}_quill', {
                placeholder: 'Enter content',
                theme: 'snow',
                modules: {
                    toolbar: [
                        ['bold', 'italic', 'underline', 'strike'],
                        ['blockquote', 'code-block'],
                        [{ 'header': 1 }, { 'header': 2 }],
                        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                        [{ 'script': 'sub'}, { 'script': 'super' }],
                        [{ 'indent': '-1'}, { 'indent': '+1' }],
                        [{ 'direction': 'rtl' }],
                        [{ 'size': ['small', false, 'large', 'huge'] }],
                        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                        [{ 'color': [] }, { 'background': [] }],
                        [{ 'font': [] }],
                        [{ 'align': [] }],
                        ['clean', 'link', 'image']
                    ]
                }
            });

            quill.on('text-change', function () {
                const input = document.getElementById('{{ id }}')
                input.value = quill.container.firstChild.innerHTML;
            })

            quill.getModule('toolbar').addHandler('image', async function() {
                quillContainerFileInput.trigger('click')
            });
        });
    </script>
{% endblock %}