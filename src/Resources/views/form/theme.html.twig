{% block edb_masked_row %}
    {{ form_label(form) }}
    {{ form_widget(form) }}
    <div class="masked-container masked-container-{{ form.vars.id }} mb-3">
        {% for button_name, config in choices %}
            <button type="button" class="btn btn-sm btn-primary mb-1 {{ form.vars.disabled ? 'disabled' : '' }}" data-value="{{ config.value }}" data-form-ids="{{ config.forms | join(',') }}" {% if not form.vars.disabled %}onclick="selectMaskedForm('{{ form.vars.id }}', '{{ config.value }}')"{% endif %}>
                {{ button_name }}
            </button>
        {% endfor %}
    </div>
    <script>
        jquery(function() {
            selectMaskedForm("{{ form.vars.id }}", "{{ value }}")
        });
    </script>
{% endblock %}

{% block edb_media_row %}
    <div class="mb-3">
        {{ form_label(form) }}
        {% if form.vars.errors | length > 0 %}
            {% for error in form.vars.errors %}
                <div class="alert alert-sm alert-danger">{{ error.message }}</div>
            {% endfor %}
        {% endif %}
        <div id="{{ form.vars.id }}-media-form">
            <div id="{{ form.vars.id }}-media-preview" class="bg-light col-12">
                {% if preview is defined %}
                    {{ preview | raw }}
                {% endif %}
            </div>
            <div class="mb-3">
                <input type="hidden" id="{{ form.vars.id }}" name="{{ form.vars.full_name }}" value="{{ value }}">
                <input type="file" onchange="jquery('#{{ form.vars.id }}-media-form').trigger({type: 'updateValue', fileInput: this})" class="d-none">

                {% if form.vars.attr.readonly is not defined %}
                    <button type="button" class="btn btn-sm btn-primary" onclick="jquery(this).trigger('open')">
                        {{ 'Select media' | trans }}
                    </button>
                    <label onclick="jquery(this).prev().prev().trigger('click')" for="{{ form.vars.full_name }}" class="custom-upload-label btn btn-sm btn-secondary"></label>
                    <button type="button" {% if preview is not defined %}style="display: none"{% endif%} id="{{ form.vars.id }}-clear" class="btn btn-sm btn-danger"><i class="fa fa-trash-alt"></i></button>
                {% endif %}
            </div>
        </div>
    </div>

    <script>
        jquery(function() {
            const previewContainer = jquery("#{{ form.vars.id }}-media-preview")
            const formContainer = jquery("#{{ form.vars.id }}-media-form")
            const inputElement = jquery("#{{ form.vars.id }}")
            const clearButton = jquery("#{{ form.vars.id }}-clear")

            clearButton.on("click", async function(event) {
                inputElement.val("")
                previewContainer.html("")
                jquery(this).hide()
            })

            previewContainer.on("refresh", async function(event) {
                if (!event.id) return
                const response = await fetch("{{ path(preview_route_name) }}?id=" + event.id, {method: "GET"})
                if (response.status === 200) {
                    const html = await response.text()
                    if (html) {
                        this.innerHTML = "<div class=\"mb-3\">"+html+"</div>"
                        clearButton.show()
                    }
                } else {
                    showAlert("Something went wrong while loading the preview", "danger")
                }
            })

            formContainer.on("open", async function() {
                mediaModalObject.show()

                let params = {"t": '{{ form.vars.id }}'}
                {% if mime_types | length > 0 %}
                params["m"] = {{ mime_types | json_encode | raw }}
                {% endif %}

                const response = await fetch("{{ path('media_modal_list') }}?" + jquery.param(params), {method: "GET"})
                const html = await response.text()
                mediaModelBody.html(html)
            })

            document.addEventListener('pickMedia', async function(event) {
                if (event.detail.targetId != "{{ form.vars.id }}") return
                mediaModalObject.hide()
                inputElement.val(event.detail.value)
                previewContainer.trigger({type: "refresh", id: event.detail.value})
            })

            formContainer.on("updateValue", async function(event) {
                const file = event.fileInput.files[0]
                const formData = new FormData()
                formData.append("media", file)

                const response = await fetch("{{ path('media_upload') }}", {
                    method: "POST",
                    body: formData
                });

                const responseBody = await response.json()
                if (response.status === 200) {
                    event.fileInput.value = null
                    showAlert("File uploaded successfully")
                    inputElement.val(responseBody.mediaId)
                    previewContainer.trigger({type: "refresh", id: responseBody.mediaId})
                } else {
                    showAlert(responseBody.error, "danger")
                }
            })
        })
    </script>
{% endblock %}

{% block edb_collection_row %}
    <div class="mb-3">
        <label for="{{ form.vars.id }}" class="form-label">
            {% if form.vars.label is not empty %}
                {{ form.vars.label }}
            {% else %}
                {{ form.vars.name | humanize | trans }}
            {% endif %}
        </label>
        <div class="form-collection-wrapper bg-light">
            <div class="form-collection-inner">
                <ul class="form-collection {{ form.vars.id }}" data-allow-add="{{ form.vars.allow_add ? 'true' : 'false' }}" data-allow-delete="{{ form.vars.allow_delete ? 'true' : 'false' }}" {% if form.vars.allow_add %}data-prototype="{{ form_row(form.vars.prototype)|e('html_attr') }}"{% endif %}>
                    {% for childForm in form.children %}
                        <li class="form-collection-item">
                            <div class="row">
                                <div class="col">
                                    {{ form_row(childForm) }}
                                </div>
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            </div>
            {% if form.vars.allow_add %}
                <button type="button" class="add_item_link_{{ form.vars.id }} btn btn-sm btn-success" data-collection-holder-class="{{ form.vars.id }}">
                    <i class="fa fa-plus-circle"></i>
                </button>
            {% endif %}
        </div>
    </div>

    <script>
        function addFormToCollection(collectionHolder, allowAdd, allowDelete) {
            if (!allowAdd) return

            let prototype = collectionHolder.data("prototype")
            let index = collectionHolder.data("index")

            let newForm = prototype
            newForm = newForm.replace(/__name__/g, index)

            collectionHolder.data("index", index + 1)

            let newFormLi = jquery("<li class=\"form-collection-item\"><div class=\"row\"><div class=\"col\">"+newForm+"</div></div></li>")

            collectionHolder.append(newFormLi)

            addRowButtons(newFormLi, allowAdd, allowDelete)

            collectionHolder.find('.edb_admin_position').each((element, index) => {
                element.value = index
            })
        }

        function addRowButtons(tagFormLi, allowAdd, allowDelete) {
            if (!allowDelete) return

            let rowButtonsHTML = "<div class=\"col-md-1 col-2\">";

            const allowSort = {{ form.vars.sortable ? 'true' : 'false' }}
            if (allowSort) {
                rowButtonsHTML += "<button type=\"button\" class=\"edb_collection_move up btn btn-sm btn-secondary\">" +
                    "<i class=\"fa fa-arrow-circle-up\"></i>" +
                    "</button>" +
                    "<br>" +
                    "<button type=\"button\" class=\"edb_collection_move down btn btn-sm btn-secondary mt-1\">" +
                    "<i class=\"fa fa-arrow-circle-down\"></i>" +
                    "</button>" +
                    "<br>" +
                    "<button type=\"button\" class=\"edb_collection_remove btn btn-sm btn-danger mt-1 mb-3\">" +
                    "<i class=\"fa fa-minus-circle\"></i>" +
                    "</button>" +
                    "</div>"
            } else {
                rowButtonsHTML += "<button type=\"button\" class=\"edb_collection_remove btn btn-sm btn-danger mb-3\">" +
                    "<i class=\"fa fa-minus-circle\"></i>" +
                    "</button>" +
                    "</div>"
            }

            const rowButtons = jquery(rowButtonsHTML)
            tagFormLi.find(".row:first-child").prepend(rowButtons)

            rowButtons.on("click", ".edb_collection_remove", function (e) {
                tagFormLi.remove()
            })

            rowButtons.on("click", ".edb_collection_move", function (e) {
                const up = e.target.className.includes('up') ? true : false;
                const collectionUl = e.target.closest(".form-collection")
                const collectionElement = e.target.closest(".form-collection-item")
                const allElements = collectionUl.querySelectorAll(".form-collection-item")

                let clickedElementIndex = 0
                allElements.forEach((element, index) => {
                    if (element === collectionElement) {
                        clickedElementIndex = index
                    }
                })

                const lastItemIndexInList = allElements.length - 1
                if (clickedElementIndex === lastItemIndexInList && !up) {
                    return
                }

                if (up && clickedElementIndex === 0) {
                    return
                }

                if (up) {
                    allElements[clickedElementIndex].parentNode.insertBefore(allElements[clickedElementIndex], allElements[clickedElementIndex - 1])
                } else {
                    allElements[clickedElementIndex].parentNode.insertBefore(allElements[clickedElementIndex + 1], allElements[clickedElementIndex])
                }

                collectionUl.querySelectorAll('.edb_admin_position').forEach((element, index) => {
                    element.value = index
                })
            })
        }

        jquery(document).ready(function() {
            let collectionHolder = jquery("ul.{{ form.vars.id }}")

            let allowAdd = collectionHolder.data('allowAdd')
            let allowDelete = collectionHolder.data('allowDelete')

            collectionHolder.find("li").each(function() {
                addRowButtons(jquery(this), allowAdd, allowDelete)
            })

            collectionHolder.data("index", collectionHolder.find(".form-collection-item").length)

            jquery("body").on("click", ".add_item_link_{{ form.vars.id }}", function(e) {
                addFormToCollection(collectionHolder, allowAdd, allowDelete)
            })
        });
    </script>
{% endblock %}

{% block edb_slug_row %}
    <div class="mb-3">
        {{ form_label(form) }}

        {% set formId = form.vars.id %}
        {% set messageText = 'The slug will be recreated after saving' | trans %}
        {% set onClickJs = "jquery('#" ~ formId ~ "').val(''); showAlert('" ~ messageText ~ "');" %}

        <div class="input-group">
            <input id="{{ form.vars.id }}" name="{{ form.vars.full_name }}" type="text" class="form-control" readonly value="{{ value ?? '' }}">
            <div class="input-group-append test">
                <button onclick="{{ onClickJs | raw }}" class="btn btn-outline-secondary" type="button">
                    <i class="fa fa-sync"></i>
                </button>
            </div>
        </div>
    </div>
{% endblock %}

{% block edb_tiny_mce_row %}
    <script type="text/javascript">
        jquery(function() {
            tinymce.init({
                selector: "#tinymce-{{ form.vars.id }}",
                height: {{ height }},
                menubar: {{ show_menu ? 'true' : 'false' }},
                paste_as_text: {{ paste_as_text ? 'true' : 'false' }},
                readonly: {{ form.vars.attr.readonly is defined ? 1 : 0 }},
                relative_urls: false,
                remove_script_host : true,
                force_br_newlines: {{ force_br_newlines ? 'true' : 'false' }},
                force_p_newlines: {{ force_p_newlines ? 'true' : 'false' }},
                forced_root_block: '{{ forced_root_block }}',
                document_base_url: "{{ app.request.getSchemeAndHttpHost() }}/",
                plugins: [
                    "{{ form.vars.tinymce_plugins }}",
                ],
                toolbar: "{{ form.vars.tinymce_toolbar }}",
                {% if form.vars.editor_css %}
                content_css: "{{ form.vars.editor_css }}",
                {% endif %}
                {% if form.vars.tinymce_formats %}
                formats: {{ form.vars.tinymce_formats | json_encode() | raw }},
                {% endif %}
                {% if form.vars.tinymce_style_formats %}
                style_formats: {{ form.vars.tinymce_style_formats | json_encode() | raw }},
                {% endif %}
                {% if form.vars.link_list %}
                link_list: {{ form.vars.link_list | json_encode() | raw }},
                {% endif %}
            })
            document.addEventListener('pickMedia', async function(event) {
                if (event.detail.targetId != "tinymce-{{ form.vars.id }}") return
                mediaModalObject.hide()

                const params = {
                    "w": 100,
                    "h": 100,
                    "id": event.detail.value
                }

                const response = await fetch("{{ path('media_insert') }}?" + jquery.param(params), {method: "GET"})
                const html = await response.text()
                const parentEditor = parent.tinyMCE.activeEditor
                parentEditor.execCommand('mceInsertRawHTML', false, html)
            });
        });
    </script>
    <div class="mb-3 {% if form.vars.errors | length > 0 %}invalid-tinymce{% endif %}">
        {{ form_label(form) }}
        <textarea name="{{ full_name }}" data-list-url="{{ path('media_modal_list') }}?{% for mime in media_mime_types %}{{ loop.first ? '' : '&' }}m[]={{ mime }}{% endfor %}" data-insert-url="{{ path('media_insert') }}" id="tinymce-{{ form.vars.id }}">{{ value | raw }}</textarea>
        {{ form_errors(form) }}
    </div>
{% endblock %}

{% block edb_media_focus_point_row %}
    {% if form.vars.mediaInstance %}

        {{ form_label(form) }}
        {{ form_rest(form) }}

        {% set generatedImagePath = render_media(form.vars.mediaInstance, 250, 250, 'size') %}
        {% if generatedImagePath %}
            <div class="edb-media-focus-point-canvas">
                <div class="edb-media-focus-point-canvas-selection">
                    <i class="fa fa-crosshairs"></i>
                </div>
                <img class="{{ form.vars.id }}" src="{{ generatedImagePath }}" alt="{{ form.vars.mediaInstance }}">
            </div>
        {% else %}
            <i class="fa fa-eye-slash"></i> {{ 'Not an image' | trans }}
        {% endif %}

        <style>
            .edb-media-focus-point-canvas {
                cursor: crosshair;
                position: relative;
                user-select: none;
                display: inline-block;
            }
            .edb-media-focus-point-canvas-selection {
                position: absolute;
                box-shadow: white 0 0 20px 20px;
            }
            .edb-media-focus-point-canvas-selection i {
                position: absolute;
                left: -8px;
                top: -8px;
            }
        </style>

        <script>
            document.getElementsByClassName('{{ form.vars.id }}')[0].addEventListener('load', (event) => {
                const x = document.getElementById('{{ form.x.vars.id }}').value
                const y = document.getElementById('{{ form.y.vars.id }}').value

                const canvasWidth = event.target.width
                const canvasHeight = event.target.height

                const selector = event.target.previousElementSibling

                selector.style.left = Math.ceil(canvasWidth * (x / 100)) + 'px'
                selector.style.top = Math.ceil(canvasHeight * (y / 100)) + 'px'
            })

            document.getElementsByClassName('{{ form.vars.id }}')[0].addEventListener('click', (event) => {
                const canvasLeft = event.target.getBoundingClientRect().left
                const canvasTop = event.target.getBoundingClientRect().top
                const canvasWidth = event.target.width
                const canvasHeight = event.target.height

                const selector = event.target.previousElementSibling

                const newX = Math.ceil(event.clientX - canvasLeft)
                const newY = Math.ceil(event.clientY - canvasTop)

                selector.style.left = newX + 'px'
                selector.style.top = newY + 'px'

                const x = Math.floor((newX / canvasWidth) * 100)
                const y = Math.floor((newY / canvasHeight) * 100)

                document.getElementById('{{ form.x.vars.id }}').value = x
                document.getElementById('{{ form.y.vars.id }}').value = y
            })
        </script>

    {% endif %}
{% endblock %}
